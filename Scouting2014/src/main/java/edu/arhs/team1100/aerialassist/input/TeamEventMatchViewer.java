package edu.arhs.team1100.aerialassist.input;

import edu.arhs.team1100.aerialassist.handlers.EventHandler;
import edu.arhs.team1100.aerialassist.handlers.TeamEventMatchHandler;
import edu.arhs.team1100.aerialassist.scouting.objects.TeamEventMatch;
import java.util.List;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Eddie
 */
public class TeamEventMatchViewer extends javax.swing.JFrame {

    /**
     * Creates new form TeamEventMatchViewer
     */
    DefaultTableModel model;
    TeamEventMatchHandler temh;
    EventHandler eh;
    List matchesShowing;

    public TeamEventMatchViewer() {
        initComponents();
        temh = new TeamEventMatchHandler();
        eh = new EventHandler();
        matchesShowing = temh.getMatches();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        temTable = new javax.swing.JTable();
        addButton = new javax.swing.JButton();
        editButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        preloadBallCheckBox = new javax.swing.JCheckBox();
        zoneChangeCheckBox = new javax.swing.JCheckBox();
        autoBallHighCheckBox = new javax.swing.JCheckBox();
        autoBallLowCheckBox = new javax.swing.JCheckBox();
        unableToUnloadAutoBallCheckBox = new javax.swing.JCheckBox();
        trussThrowCheckBox = new javax.swing.JCheckBox();
        trussCatchCheckBox = new javax.swing.JCheckBox();
        catchCheckBox = new javax.swing.JCheckBox();
        passesSpinner = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        assistsSpinner = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        highGoalsScoredSpinner = new javax.swing.JSpinner();
        jLabel3 = new javax.swing.JLabel();
        lowGoalsScoredSpinner = new javax.swing.JSpinner();
        jLabel4 = new javax.swing.JLabel();
        cyclesSpinner = new javax.swing.JSpinner();
        jLabel5 = new javax.swing.JLabel();
        highGoalAccuracySpinner = new javax.swing.JSpinner();
        jLabel6 = new javax.swing.JLabel();
        lowGoalAccuracySpinner = new javax.swing.JSpinner();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        floorPickupSlider = new javax.swing.JSlider();
        jLabel9 = new javax.swing.JLabel();
        defensiveCapabilitiesSlider = new javax.swing.JSlider();
        currentEventCheckBox = new javax.swing.JCheckBox();
        updateButton = new javax.swing.JButton();
        viewAllButton = new javax.swing.JButton();
        teamButton = new javax.swing.JButton();
        eventButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Matches");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                formWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
            }
        });

        temTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Match Number", "Team Number", "Event Name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(temTable);

        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        editButton.setText("Edit");
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        preloadBallCheckBox.setText("Preloads Ball (Auto)");

        zoneChangeCheckBox.setText("Changes Zone (Auto)");

        autoBallHighCheckBox.setText("Can Shoot into High (Auto)");

        autoBallLowCheckBox.setText("Can Shoot into Low (Auto)");

        unableToUnloadAutoBallCheckBox.setText("Unable to Unload (Auto)");

        trussThrowCheckBox.setText("Can Throw Over Truss");

        trussCatchCheckBox.setText("Can Catch from Truss");

        catchCheckBox.setText("Can Catch in General");

        passesSpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(0), Integer.valueOf(0), null, Integer.valueOf(1)));

        jLabel1.setText("Passes ");

        assistsSpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(0), Integer.valueOf(0), null, Integer.valueOf(1)));

        jLabel2.setText("Assists");

        highGoalsScoredSpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(0), Integer.valueOf(0), null, Integer.valueOf(1)));

        jLabel3.setText("High Goals Scored");

        lowGoalsScoredSpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(0), Integer.valueOf(0), null, Integer.valueOf(1)));

        jLabel4.setText("Low Goals Scored");

        cyclesSpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(0), Integer.valueOf(0), null, Integer.valueOf(1)));

        jLabel5.setText("Scoring Cycles Completed");

        highGoalAccuracySpinner.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(0.0d), Double.valueOf(0.0d), null, Double.valueOf(1.0d)));

        jLabel6.setText("High Goal Accuracy");

        lowGoalAccuracySpinner.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(0.0d), Double.valueOf(0.0d), null, Double.valueOf(1.0d)));

        jLabel7.setText("Low Goals Accuracy");

        jLabel8.setText("Floor Pickup Ability/Speed");

        floorPickupSlider.setMajorTickSpacing(1);
        floorPickupSlider.setMaximum(5);
        floorPickupSlider.setMinorTickSpacing(1);
        floorPickupSlider.setPaintLabels(true);
        floorPickupSlider.setPaintTicks(true);
        floorPickupSlider.setSnapToTicks(true);
        floorPickupSlider.setValue(0);

        jLabel9.setText("Defensive Capabilities");

        defensiveCapabilitiesSlider.setMajorTickSpacing(1);
        defensiveCapabilitiesSlider.setMaximum(5);
        defensiveCapabilitiesSlider.setMinorTickSpacing(1);
        defensiveCapabilitiesSlider.setPaintLabels(true);
        defensiveCapabilitiesSlider.setPaintTicks(true);
        defensiveCapabilitiesSlider.setSnapToTicks(true);
        defensiveCapabilitiesSlider.setValue(0);

        currentEventCheckBox.setText("View Matches Only From Current Event");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(preloadBallCheckBox)
                    .addComponent(zoneChangeCheckBox)
                    .addComponent(autoBallHighCheckBox)
                    .addComponent(autoBallLowCheckBox)
                    .addComponent(unableToUnloadAutoBallCheckBox)
                    .addComponent(trussThrowCheckBox)
                    .addComponent(trussCatchCheckBox)
                    .addComponent(catchCheckBox)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(highGoalAccuracySpinner, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(cyclesSpinner, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lowGoalsScoredSpinner, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(highGoalsScoredSpinner, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(assistsSpinner)
                                .addComponent(passesSpinner, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE))
                            .addComponent(lowGoalAccuracySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jLabel7)
                            .addComponent(jLabel5)))
                    .addComponent(jLabel8)
                    .addComponent(floorPickupSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(defensiveCapabilitiesSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(currentEventCheckBox))
                .addContainerGap(14, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(preloadBallCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(zoneChangeCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(autoBallHighCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(autoBallLowCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(unableToUnloadAutoBallCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(trussThrowCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(trussCatchCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(catchCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passesSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(assistsSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(highGoalsScoredSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(highGoalAccuracySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(4, 4, 4)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lowGoalsScoredSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lowGoalAccuracySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cyclesSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(floorPickupSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(defensiveCapabilitiesSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(currentEventCheckBox)
                .addGap(0, 14, Short.MAX_VALUE))
        );

        updateButton.setText("Update");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        viewAllButton.setText("View All");
        viewAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewAllButtonActionPerformed(evt);
            }
        });

        teamButton.setText("Teams");
        teamButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                teamButtonActionPerformed(evt);
            }
        });

        eventButton.setText("Events");
        eventButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eventButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 343, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(teamButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(eventButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(updateButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(deleteButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE)
                    .addComponent(editButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE)
                    .addComponent(addButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE)
                    .addComponent(viewAllButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(addButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(editButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deleteButton)
                .addGap(90, 90, 90)
                .addComponent(updateButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(viewAllButton)
                .addGap(107, 107, 107)
                .addComponent(teamButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(eventButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        new TeamEventMatchInput().setVisible(true);
    }//GEN-LAST:event_addButtonActionPerformed

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        new TeamEventMatchInput((TeamEventMatch) temTable.getValueAt(temTable.getSelectedRow(), 0)).setVisible(true);
    }//GEN-LAST:event_editButtonActionPerformed

    private void formWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowGainedFocus
        matchesShowing = getMatchList(getReferenceMatch());
        updateTEMModel();
    }//GEN-LAST:event_formWindowGainedFocus

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        temh.deleteEvent((TeamEventMatch) temTable.getValueAt(temTable.getSelectedRow(), 0));
        matchesShowing = getMatchList(getReferenceMatch());
        updateTEMModel();
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        matchesShowing = getMatchList(getReferenceMatch());
        updateTEMModel();
    }//GEN-LAST:event_updateButtonActionPerformed

    private void viewAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewAllButtonActionPerformed
        matchesShowing = getMatchList(null);
        updateTEMModel();
    }//GEN-LAST:event_viewAllButtonActionPerformed

    private void teamButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_teamButtonActionPerformed
        new TeamViewer().setVisible(true);
    }//GEN-LAST:event_teamButtonActionPerformed

    private void eventButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eventButtonActionPerformed
        new EventViewer().setVisible(true);
    }//GEN-LAST:event_eventButtonActionPerformed

    private List getMatchList(TeamEventMatch referenceMatch) {
        if (referenceMatch == null && currentEventCheckBox.isSelected() == false) {
            return temh.getMatches();
        } else if (referenceMatch == null && currentEventCheckBox.isSelected() == true) {
            return temh.getMatches(new TeamEventMatch(), eh.getCurrentEvent().getEventID());
        } else if (referenceMatch != null && currentEventCheckBox.isSelected() == false) {
            return temh.getMatches(referenceMatch);
        } else if (referenceMatch != null && currentEventCheckBox.isSelected() == true) {
            return temh.getMatches(referenceMatch, eh.getCurrentEvent().getEventID());
        } else {
            return null;
        }
    }

    private void updateTEMModel() {
        model = (DefaultTableModel) temTable.getModel();
        int rows = temTable.getRowCount();

        for (int i = rows - 1; i >= 0; i--) {
            model.removeRow(i);
        }

        for (int i = 0; i < matchesShowing.size(); i++) {
            TeamEventMatch tem = (TeamEventMatch) matchesShowing.get(i);
            model.addRow(new Object[]{tem, tem.getTeamNumber(), eh.getEventFromId(tem.getEventID())});
        }

    }

    public TeamEventMatch getReferenceMatch() {
        TeamEventMatch referenceMatch = new TeamEventMatch();
        referenceMatch.setAssists(getAssists());
        referenceMatch.setAutoBallHigh(canAutoBallHigh());
        referenceMatch.setAutoBallLow(canAutoBallLow());
        referenceMatch.setCanCatch(canCatch());
        referenceMatch.setCycles(getCycles());
        referenceMatch.setDefensive(getDefensive());
        referenceMatch.setFloorPickup(getFloorPickup());
        referenceMatch.setHighGoalAccuracy(getHighGoalAccuracy());
        referenceMatch.setHighGoalsScored(getHighGoalsScored());
        referenceMatch.setLowGoalAccuracy(getLowGoalAccuracy());
        referenceMatch.setLowGoalsScored(getLowGoalsScored());
        referenceMatch.setPasses(getPasses());
        referenceMatch.setPreloadBall(getPreloadBall());
        referenceMatch.setTrussCatch(canTrussCatch());
        referenceMatch.setTrussThrow(canTrussThrow());
        referenceMatch.setUnableToUnloadAutoBall(isUnableToUnloadAutoBall());
        referenceMatch.setZoneChange(canZoneChange());

        return referenceMatch;
    }

    public boolean getPreloadBall() {
        return preloadBallCheckBox.isSelected();
    }

    public boolean canZoneChange() {
        return zoneChangeCheckBox.isSelected();
    }

    public boolean canAutoBallHigh() {
        return autoBallHighCheckBox.isSelected();
    }

    public boolean canAutoBallLow() {
        return autoBallLowCheckBox.isSelected();
    }

    public boolean isUnableToUnloadAutoBall() {
        return unableToUnloadAutoBallCheckBox.isSelected();
    }

    public boolean canTrussThrow() {
        return trussThrowCheckBox.isSelected();
    }

    public boolean canTrussCatch() {
        return trussCatchCheckBox.isSelected();
    }

    public boolean canCatch() {
        return catchCheckBox.isSelected();
    }

    public int getPasses() {
        return (Integer) passesSpinner.getValue();
    }

    public int getAssists() {
        return (Integer) assistsSpinner.getValue();
    }

    public int getHighGoalsScored() {
        return (Integer) highGoalsScoredSpinner.getValue();
    }

    public double getHighGoalAccuracy() {
        return (Double) highGoalAccuracySpinner.getValue() / 100.0;
    }

    public int getLowGoalsScored() {
        return (Integer) lowGoalsScoredSpinner.getValue();
    }

    public double getLowGoalAccuracy() {
        return (Double) lowGoalAccuracySpinner.getValue() / 100.0;
    }

    public int getCycles() {
        return (Integer) cyclesSpinner.getValue();
    }

    public int getFloorPickup() {
        return floorPickupSlider.getValue();
    }

    public int getDefensive() {
        return defensiveCapabilitiesSlider.getValue();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JSpinner assistsSpinner;
    private javax.swing.JCheckBox autoBallHighCheckBox;
    private javax.swing.JCheckBox autoBallLowCheckBox;
    private javax.swing.JCheckBox catchCheckBox;
    private javax.swing.JCheckBox currentEventCheckBox;
    private javax.swing.JSpinner cyclesSpinner;
    private javax.swing.JSlider defensiveCapabilitiesSlider;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton editButton;
    private javax.swing.JButton eventButton;
    private javax.swing.JSlider floorPickupSlider;
    private javax.swing.JSpinner highGoalAccuracySpinner;
    private javax.swing.JSpinner highGoalsScoredSpinner;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner lowGoalAccuracySpinner;
    private javax.swing.JSpinner lowGoalsScoredSpinner;
    private javax.swing.JSpinner passesSpinner;
    private javax.swing.JCheckBox preloadBallCheckBox;
    private javax.swing.JButton teamButton;
    private javax.swing.JTable temTable;
    private javax.swing.JCheckBox trussCatchCheckBox;
    private javax.swing.JCheckBox trussThrowCheckBox;
    private javax.swing.JCheckBox unableToUnloadAutoBallCheckBox;
    private javax.swing.JButton updateButton;
    private javax.swing.JButton viewAllButton;
    private javax.swing.JCheckBox zoneChangeCheckBox;
    // End of variables declaration//GEN-END:variables
}
